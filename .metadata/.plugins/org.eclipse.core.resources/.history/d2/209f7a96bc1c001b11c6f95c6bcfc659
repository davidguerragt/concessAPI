package com.concess.api.controller;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.concess.api.entity.Vehicle;
import com.concess.api.service.VehicleService;

@RestController
@RequestMapping("/api/vehicles")
public class VehicleController {
	
	@Autowired
	private VehicleService vehicleService;
	
	//Create a new vehicle
	@PostMapping
	public ResponseEntity<?> create (@RequestBody Vehicle vehicle) {
		return ResponseEntity.status(HttpStatus.CREATED).body(vehicleService.save(vehicle));
	}
	
	//Read an vehicle
	@GetMapping("/{id}")
	public ResponseEntity<?> read(@PathVariable Long id) {
		Optional<Vehicle> oVehicle = vehicleService.findById(id);
		
		if(!oVehicle.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		
		return ResponseEntity.ok(oVehicle);
	}
	
	//Update an vehicle
	@PutMapping("/{id}")
	public ResponseEntity<?> update (@RequestBody Vehicle vehicleDetails, @PathVariable Long id) {
		Optional<Vehicle> oVehicle = vehicleService.findById(id);
		
		if(!oVehicle.isPresent()) {
			return ResponseEntity.notFound().build();
		}

		oVehicle.get().setVehiclename(vehicleDetails.getVehiclename());
		oVehicle.get().setName(vehicleDetails.getName());
		oVehicle.get().setPassword(vehicleDetails.getPassword());
		oVehicle.get().setEmail(vehicleDetails.getEmail());
		oVehicle.get().setStatus(vehicleDetails.getStatus());
		
		return ResponseEntity.status(HttpStatus.CREATED).body(vehicleService.save(oVehicle.get()));
	}
	
	
	//Delete an vehicle
	@DeleteMapping(value = "/{id}")
	public ResponseEntity<?> delete(@PathVariable Long id) {
		Optional<Vehicle> oVehicle = vehicleService.findById(id);
		
		if(!oVehicle.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		
		vehicleService.deleteById(id);
		return ResponseEntity.ok().build();
	}

	//Read all vehicles
	@GetMapping
	public List<Vehicle> readAll() {
		
		List<Vehicle> vehicles = StreamSupport
				.stream(vehicleService.findAll().spliterator(), false)
				.collect(Collectors.toList());
		
		return vehicles;
	}
}
